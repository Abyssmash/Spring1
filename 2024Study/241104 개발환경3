웹개발 
	Client	    >(request)url       Server
- 웹 브라우저		             아파치 - 웹서버: 정적 데이터(서비스) 처리 
                                        > 그림 파일, html 문서, css, java script
컴파일: html, css, js			 톰캣 - WAS: 동적 데이터(서비스) 처리 > 데이터 베이스 정보
                                > FrameWork - Spring legacy: 컨트롤러,  view template(JSP)

                                *JSP: html로 랜더링
                                (데이터베이스 자료의 객체인 DTO는 html에서 읽을 수 없다.
                                html은 객체를 사용하지 않기 때문이다.
                                JSP는 데이터 베이스의 객체를 html이 인식할 수 있는 형태로
                                가져오는 언어이다.)

                                *view: 클라이언트에게 응답할 화면

*view는 서버가 준다. type: 문자열로 클라이언트에게 전달한다.

클라이언트가 request는 url로 한다. (ex: http://www. 어쩌고)
network상에서는 모두 다 문자열로 생각한다.

한 페이지(html)만 주는 것(화면을 새로고침 하는):  동기방식
API(int, src, Json)을 주는 것(화면 일부분만 바꾸는): 비동기방식
-----------------------------------------------------------------------


1. html에서 태그, id, 클래스, 자식, 자손 등 object를 선택할 수 있다.
2. 선택한 object에서 Value, innerText, innerHTML로 데이터를 조작할 수 있다.
3. 새로운 object를 생성해서 문서에 포함시킬 수 있다. (DOM구조)
4. 비동기 통신(API 사용 능력)
+ view JS 기능 (ex: 메뉴 펼치기, 메뉴바 고정, 자동화면 갱신)
5. 객체 활용 (ex: 그래프 그려주기(라이브러리 활용:누군가 미리 만들어놓은 소스 파일))